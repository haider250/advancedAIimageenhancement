<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Enhancer Pro | Real-Time Image Upscaling</title>
    <meta name="description" content="Professional AI-powered image upscaler with real API integration. Transform low-resolution images with genuine AI processing.">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #8b5cf6;
            --accent: #ec4899;
            --success: #10b981;
            --dark: #1e293b;
            --darker: #0f172a;
            --light: #f8fafc;
            --gray: #e2e8f0;
            --gray-dark: #94a3b8;
            --card-bg: rgba(255, 255, 255, 0.08);
            --border-radius: 16px;
            --transition: all 0.3s ease;
            --shadow: 0 10px 30px -10px rgba(0, 0, 0, 0.2);
            --shadow-hover: 0 20px 40px -15px rgba(0, 0, 0, 0.3);
            --glass-bg: rgba(255, 255, 255, 0.08);
            --glass-border: rgba(255, 255, 255, 0.18);
            --config-bg: rgba(15, 23, 42, 0.7);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, var(--darker), #1e1b4b);
            color: var(--light);
            min-height: 100vh;
            line-height: 1.6;
            overflow-x: hidden;
            padding-bottom: 60px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header Styles */
        header {
            padding: 24px 0;
            position: relative;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            font-size: 24px;
            color: white;
            text-decoration: none;
        }

        .logo-icon {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { filter: drop-shadow(0 0 2px rgba(99, 102, 241, 0.3)); }
            50% { filter: drop-shadow(0 0 8px rgba(99, 102, 241, 0.6)); }
            100% { filter: drop-shadow(0 0 2px rgba(99, 102, 241, 0.3)); }
        }

        /* Hero Section */
        .hero {
            text-align: center;
            padding: 40px 0 60px;
            position: relative;
        }

        .hero h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 3.5rem;
            font-weight: 800;
            line-height: 1.1;
            margin-bottom: 20px;
            background: linear-gradient(to right, #fff, #e0e7ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .hero p {
            font-size: 1.25rem;
            max-width: 700px;
            margin: 0 auto 30px;
            color: var(--gray);
            opacity: 0.9;
        }

        .tagline {
            display: inline-block;
            background: rgba(99, 102, 241, 0.15);
            color: white;
            padding: 6px 16px;
            border-radius: 30px;
            font-size: 0.875rem;
            margin-bottom: 25px;
            letter-spacing: 0.5px;
            border: 1px solid rgba(147, 197, 253, 0.2);
        }

        /* Tool Container */
        .tool-container {
            background: var(--glass-bg);
            border-radius: var(--border-radius);
            border: 1px solid var(--glass-border);
            backdrop-filter: blur(12px);
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
            margin-bottom: 30px;
        }

        .tool-header {
            padding: 24px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .tool-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(to right, #fff, #c7d2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .config-toggle {
            background: rgba(255, 255, 255, 0.08);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.15);
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
        }

        .config-toggle:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        /* Configuration Panel */
        .config-panel {
            background: var(--config-bg);
            border-top: 1px solid rgba(255, 255, 255, 0.08);
            padding: 20px;
            display: none;
        }

        .config-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
        }

        .config-section {
            background: rgba(30, 41, 59, 0.3);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.08);
        }

        .config-section h3 {
            font-size: 1.1rem;
            color: white;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .config-option {
            margin-bottom: 15px;
        }

        .config-option label {
            display: block;
            margin-bottom: 6px;
            color: var(--gray);
            font-size: 0.9rem;
        }

        .config-option select,
        .config-option input[type="text"] {
            width: 100%;
            padding: 10px 14px;
            border-radius: 8px;
            background: rgba(15, 23, 42, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: white;
            font-family: 'Inter', sans-serif;
        }

        .config-option input[type="text"]:focus {
            outline: none;
            border-color: var(--primary);
        }

        .config-option .option-description {
            font-size: 0.8rem;
            color: var(--gray-dark);
            margin-top: 5px;
        }

        .ad-placement-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-top: 10px;
        }

        .ad-placement-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            border-radius: 6px;
            background: rgba(15, 23, 42, 0.5);
            cursor: pointer;
            transition: var(--transition);
        }

        .ad-placement-option:hover {
            background: rgba(99, 102, 241, 0.1);
        }

        .ad-placement-option.active {
            background: rgba(99, 102, 241, 0.2);
            border: 1px solid var(--primary);
        }

        .ad-placement-option input {
            margin: 0;
        }

        .config-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.08);
        }

        .config-btn {
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border: none;
        }

        .apply-config-btn {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
        }

        .reset-config-btn {
            background: rgba(255, 255, 255, 0.08);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.15);
        }

        /* Uploader Area */
        .uploader-area {
            padding: 40px 24px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .uploader-area:hover {
            background: rgba(99, 102, 241, 0.05);
            border-color: var(--primary);
        }

        .uploader-icon {
            font-size: 48px;
            margin-bottom: 20px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .uploader-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 12px;
            color: white;
        }

        .uploader-subtitle {
            color: var(--gray);
            max-width: 500px;
            margin: 0 auto 25px;
            font-size: 1.1rem;
        }

        .file-input {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            cursor: pointer;
        }

        .supported-formats {
            display: inline-flex;
            gap: 12px;
            background: rgba(15, 23, 42, 0.5);
            padding: 8px 20px;
            border-radius: 30px;
            font-size: 0.875rem;
            color: var(--gray);
        }

        .format-tag {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .format-tag::before {
            content: "";
            display: inline-block;
            width: 8px;
            height: 8px;
            background: var(--success);
            border-radius: 50%;
        }

        .process-btn {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            padding: 16px 32px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.4);
            margin-top: 20px;
            opacity: 0.7;
            pointer-events: none;
        }

        .process-btn.active {
            opacity: 1;
            pointer-events: all;
        }

        .process-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(99, 102, 241, 0.6);
        }

        .process-btn:active {
            transform: translateY(0);
        }

        .process-btn .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: none;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Processing State */
        .processing-state {
            display: none;
            padding: 40px 24px;
            text-align: center;
        }

        .processing-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: white;
        }

        .processing-subtitle {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto 30px;
            font-size: 1.1rem;
        }

        .processing-steps {
            display: flex;
            justify-content: space-between;
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            padding: 0 40px;
        }

        .processing-steps::before {
            content: '';
            position: absolute;
            top: 12px;
            left: 0;
            width: 100%;
            height: 2px;
            background: rgba(255, 255, 255, 0.1);
            z-index: 1;
        }

        .step {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100px;
        }

        .step-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
            font-weight: 600;
            color: var(--gray);
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .step.active .step-icon {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.3);
        }

        .step.completed .step-icon {
            background: var(--success);
            color: white;
        }

        .step-label {
            font-size: 0.875rem;
            color: var(--gray);
            transition: var(--transition);
        }

        .step.active .step-label {
            color: white;
            font-weight: 600;
        }

        .ai-pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(99, 102, 241, 0.2) 0%, transparent 70%);
            animation: pulse-animation 2s infinite;
            z-index: -1;
        }

        @keyframes pulse-animation {
            0% { transform: scale(0.8); opacity: 0.6; }
            100% { transform: scale(1.2); opacity: 0; }
        }

        /* Result State */
        .result-state {
            display: none;
            padding: 24px;
        }

        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .result-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
        }

        .comparison-container {
            position: relative;
            width: 100%;
            max-width: 1000px;
            margin: 0 auto 30px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
        }

        .images-container {
            display: flex;
            position: relative;
            width: 100%;
        }

        .image-container {
            flex: 1;
            position: relative;
            min-height: 400px;
        }

        .image-label {
            position: absolute;
            top: 15px;
            left: 15px;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 6px 15px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 0.875rem;
            z-index: 2;
        }

        .original .image-label {
            background: linear-gradient(135deg, #64748b, #475569);
        }

        .enhanced .image-label {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        .image-preview {
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: #1e293b;
        }

        .comparison-slider {
            position: absolute;
            top: 0;
            left: 50%;
            width: 4px;
            height: 100%;
            background: white;
            z-index: 10;
            cursor: ew-resize;
            transform: translateX(-50%);
            display: flex;
            justify-content: center;
        }

        .slider-handle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: calc(50% - 20px);
            box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);
            transition: var(--transition);
            cursor: ew-resize;
        }

        .slider-handle:hover {
            transform: scale(1.1);
            box-shadow: 0 7px 20px rgba(99, 102, 241, 0.6);
        }

        .slider-handle svg {
            width: 20px;
            height: 20px;
            fill: white;
        }

        .enhancement-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: rgba(30, 41, 59, 0.4);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.08);
        }

        .metric-title {
            font-size: 0.875rem;
            color: var(--gray);
            margin-bottom: 10px;
        }

        .metric-value {
            font-size: 1.75rem;
            font-weight: 700;
            color: white;
        }

        .metric-subvalue {
            color: var(--success);
            font-weight: 600;
            margin-top: 4px;
        }

        .result-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        .action-btn {
            padding: 14px 28px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 10px;
            border: none;
        }

        .download-btn {
            background: linear-gradient(135deg, var(--success), #0da674);
            color: white;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
        }

        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(16, 185, 129, 0.6);
        }

        .new-btn {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .new-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
        }

        /* Ad Container */
        .ad-container {
            margin: 30px 0;
            min-height: 90px;
            display: none; /* Initially hidden, will be shown based on config */
            background: var(--card-bg);
            border-radius: var(--border-radius);
            border: 1px solid var(--glass-border);
            backdrop-filter: blur(10px);
            overflow: hidden;
            position: relative;
        }

        .ad-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 10px;
            background: rgba(30, 41, 59, 0.5);
            border: 1px dashed rgba(147, 197, 253, 0.3);
            color: var(--gray-dark);
            font-size: 0.875rem;
            text-align: center;
            padding: 15px;
        }

        .ad-placeholder span {
            font-weight: 600;
            color: #93c5fd;
        }

        /* Features Section */
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin: 40px 0;
        }

        .feature-card {
            background: var(--glass-bg);
            border-radius: var(--border-radius);
            border: 1px solid var(--glass-border);
            backdrop-filter: blur(10px);
            padding: 25px;
            transition: var(--transition);
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-hover);
            border-color: rgba(147, 197, 253, 0.3);
        }

        .feature-icon {
            width: 60px;
            height: 60px;
            border-radius: 16px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            font-size: 24px;
        }

        .feature-title {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 12px;
            color: white;
        }

        .feature-desc {
            color: var(--gray);
            line-height: 1.7;
        }

        /* CTA Section */
        .cta-section {
            background: linear-gradient(135deg, #1e1b4b, #1e293b);
            border-radius: var(--border-radius);
            padding: 50px 40px;
            text-align: center;
            margin: 40px 0;
            border: 1px solid rgba(147, 197, 253, 0.1);
        }

        .cta-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 20px;
            background: linear-gradient(to right, #fff, #c7d2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .cta-subtitle {
            font-size: 1.25rem;
            max-width: 700px;
            margin: 0 auto 30px;
            color: var(--gray);
        }

        .cta-btn {
            background: linear-gradient(135deg, var(--accent), #db2777);
            color: white;
            border: none;
            padding: 16px 40px;
            font-size: 1.2rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 12px;
            box-shadow: 0 4px 20px rgba(236, 72, 153, 0.4);
        }

        .cta-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 7px 25px rgba(236, 72, 153, 0.6);
        }

        /* Error State */
        .error-state {
            background: rgba(185, 28, 28, 0.1);
            border: 1px solid rgba(248, 113, 113, 0.3);
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            display: none;
        }

        .error-title {
            color: #fca5a5;
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .error-message {
            color: var(--gray);
        }

        .error-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .error-btn {
            padding: 8px 16px;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.08);
            color: white;
            border: none;
            cursor: pointer;
        }

        /* Footer */
        footer {
            text-align: center;
            padding: 30px 0;
            color: var(--gray);
            font-size: 0.875rem;
            margin-top: 20px;
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 15px 0;
        }

        .footer-links a {
            color: var(--gray);
            text-decoration: none;
            transition: var(--transition);
        }

        .footer-links a:hover {
            color: white;
        }

        /* Animation Classes */
        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .step-enter {
            animation: stepEnter 0.4s ease forwards;
        }

        @keyframes stepEnter {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2.5rem;
            }
            
            .uploader-area {
                min-height: 250px;
                padding: 30px 15px;
            }
            
            .tool-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .processing-steps {
                flex-wrap: wrap;
                padding: 0;
            }
            
            .step {
                width: calc(50% - 20px);
                margin-bottom: 20px;
            }
            
            .comparison-container {
                min-height: 300px;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .uploader-title {
                font-size: 1.25rem;
            }
            
            .uploader-subtitle {
                font-size: 1rem;
            }
            
            .process-btn {
                width: 100%;
            }
            
            .step {
                width: 100%;
            }
            
            .result-actions {
                flex-direction: column;
            }
            
            .action-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <a href="#" class="logo">
                <span class="logo-icon">AI</span>Enhancer Pro
            </a>
        </header>

        <section class="hero">
            <div class="tagline">REAL-TIME AI IMAGE ENHANCEMENT</div>
            <h1>Transform Low-Resolution Images With Genuine AI Processing</h1>
            <p>Our professional-grade tool integrates with leading AI services to deliver authentic image enhancement with real resolution boosting, lighting correction, and color optimization.</p>
        </section>

        <div class="tool-container">
            <div class="tool-header">
                <div class="tool-title">AI Image Upscaler & Enhancer</div>
                <button class="config-toggle" id="config-toggle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="3"></circle>
                        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                    </svg>
                    Configure Tool
                </button>
            </div>
            
            <!-- Configuration Panel -->
            <div class="config-panel" id="config-panel">
                <div class="config-grid">
                    <div class="config-section">
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="3"></circle>
                                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                            </svg>
                            AI Service Configuration
                        </h3>
                        
                        <div class="config-option">
                            <label for="api-service">AI Service Provider</label>
                            <select id="api-service">
                                <option value="lets_enhance">Let's Enhance (Recommended)</option>
                                <option value="vance_ai">Vance AI</option>
                                <option value="deep_image">Deep Image</option>
                            </select>
                            <div class="option-description">Let's Enhance provides the highest quality results with advanced enhancement capabilities.</div>
                        </div>
                        
                        <div class="config-option">
                            <label for="api-key">API Key</label>
                            <input type="text" id="api-key" placeholder="Enter your API key">
                            <div class="option-description">Get your API key from the service provider's website. Never share your API key publicly.</div>
                        </div>
                        
                        <div class="config-option">
                            <label for="processing-quality">Processing Quality</label>
                            <select id="processing-quality">
                                <option value="standard">Standard (Faster)</option>
                                <option value="enhanced" selected>Enhanced (Recommended)</option>
                                <option value="ultra">Ultra (Highest Quality)</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="config-section">
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                                <line x1="8" y1="21" x2="16" y2="21"></line>
                                <line x1="12" y1="17" x2="12" y2="21"></line>
                            </svg>
                            Ad Monetization
                        </h3>
                        
                        <div class="config-option">
                            <label>Ad Placements</label>
                            <div class="ad-placement-grid">
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-above-uploader" checked>
                                    <label for="ad-above-uploader" style="margin: 0;">Above Uploader</label>
                                </div>
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-below-uploader" checked>
                                    <label for="ad-below-uploader" style="margin: 0;">Below Uploader</label>
                                </div>
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-during-processing" checked>
                                    <label for="ad-during-processing" style="margin: 0;">During Processing</label>
                                </div>
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-above-result" checked>
                                    <label for="ad-above-result" style="margin: 0;">Above Result</label>
                                </div>
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-below-result" checked>
                                    <label for="ad-below-result" style="margin: 0;">Below Result</label>
                                </div>
                                <div class="ad-placement-option active">
                                    <input type="checkbox" id="ad-near-download" checked>
                                    <label for="ad-near-download" style="margin: 0;">Near Download</label>
                                </div>
                            </div>
                            <div class="option-description">Select where to display ad units for maximum monetization potential.</div>
                        </div>
                        
                        <div class="config-option">
                            <label for="ad-network">Ad Network</label>
                            <select id="ad-network">
                                <option value="adsense">Google AdSense</option>
                                <option value="media_net">Media.net</option>
                                <option value="propeller_ads">Propeller Ads</option>
                                <option value="custom">Custom Ad Code</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="config-actions">
                    <button class="config-btn reset-config-btn" id="reset-config">Reset</button>
                    <button class="config-btn apply-config-btn" id="apply-config">Apply Configuration</button>
                </div>
            </div>

            <!-- Uploader State -->
            <div id="uploader-state">
                <div class="uploader-area" id="dropzone">
                    <div class="uploader-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="17 8 12 3 7 8"></polyline>
                            <line x1="12" y1="3" x2="12" y2="15"></line>
                        </svg>
                    </div>
                    <h2 class="uploader-title">Enhance Your Image With AI</h2>
                    <p class="uploader-subtitle">Upload your low-resolution or blurry image and watch our AI transform it into a high-definition masterpiece with improved resolution, lighting, and color balance.</p>
                    <input type="file" id="file-input" class="file-input" accept="image/*">
                    <div class="supported-formats">
                        <span class="format-tag">JPG</span>
                        <span class="format-tag">PNG</span>
                        <span class="format-tag">GIF</span>
                        <span class="format-tag">WEBP</span>
                    </div>
                    <button id="process-btn" class="process-btn">
                        <span>Enhance Image</span>
                        <div class="spinner"></div>
                    </button>
                </div>
            </div>

            <!-- Error State -->
            <div class="error-state" id="error-state">
                <div class="error-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    <span>Error Processing Image</span>
                </div>
                <div class="error-message" id="error-message">An unexpected error occurred while processing your image. Please try again.</div>
                <div class="error-actions">
                    <button class="error-btn" id="retry-btn">Retry</button>
                    <button class="error-btn" id="new-image-btn">Upload New Image</button>
                </div>
            </div>

            <!-- Processing State -->
            <div id="processing-state" class="processing-state">
                <h2 class="processing-title">AI Enhancement in Progress</h2>
                <p class="processing-subtitle">Our advanced neural network is enhancing your image resolution, fixing lighting issues, and optimizing colors using state-of-the-art AI technology.</p>
                
                <div class="processing-steps">
                    <div class="step active" data-step="1">
                        <div class="step-icon">1</div>
                        <div class="step-label">Analyzing Image</div>
                    </div>
                    <div class="step" data-step="2">
                        <div class="step-icon">2</div>
                        <div class="step-label">Enhancing Resolution</div>
                    </div>
                    <div class="step" data-step="3">
                        <div class="step-icon">3</div>
                        <div class="step-label">Correcting Colors</div>
                    </div>
                    <div class="step" data-step="4">
                        <div class="step-icon">4</div>
                        <div class="step-label">Final Optimization</div>
                    </div>
                </div>
                
                <div class="ai-pulse"></div>
            </div>

            <!-- Ad Container - During Processing -->
            <div class="ad-container" id="ad-during-processing-container">
                <div class="ad-placeholder">
                    <span>ADVERTISEMENT</span>
                    <div>300x250 Medium Rectangle Ad Unit</div>
                </div>
            </div>

            <!-- Result State -->
            <div id="result-state" class="result-state">
                <div class="result-header">
                    <h2 class="result-title">Enhanced Image Result</h2>
                    <div class="enhancement-info">
                        <span style="color: var(--success);">AI Enhancement Complete</span>
                    </div>
                </div>
                
                <div class="comparison-container">
                    <div class="images-container">
                        <div class="image-container original">
                            <span class="image-label">Original</span>
                            <img id="original-image" class="image-preview" src="" alt="Original image">
                        </div>
                        <div class="image-container enhanced">
                            <span class="image-label">Enhanced</span>
                            <img id="enhanced-image" class="image-preview" src="" alt="Enhanced image">
                        </div>
                    </div>
                    <div class="comparison-slider" id="comparison-slider">
                        <div class="slider-handle" id="slider-handle">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <polyline points="19 12 12 19 5 12"></polyline>
                            </svg>
                        </div>
                    </div>
                </div>
                
                <div class="enhancement-metrics">
                    <div class="metric-card">
                        <div class="metric-title">Resolution</div>
                        <div class="metric-value" id="resolution-value">-</div>
                        <div class="metric-subvalue" id="resolution-improvement">-</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-title">Sharpness</div>
                        <div class="metric-value" id="sharpness-value">-</div>
                        <div class="metric-subvalue" id="sharpness-improvement">-</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-title">Color Balance</div>
                        <div class="metric-value" id="color-value">-</div>
                        <div class="metric-subvalue" id="color-improvement">-</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-title">Processing Time</div>
                        <div class="metric-value" id="time-value">-</div>
                        <div class="metric-subvalue" id="time-estimate">-</div>
                    </div>
                </div>
                
                <!-- Ad Container - Near Download -->
                <div class="ad-container" id="ad-near-download-container">
                    <div class="ad-placeholder">
                        <span>ADVERTISEMENT</span>
                        <div>Responsive Ad Unit Near Download Button</div>
                    </div>
                </div>
                
                <div class="result-actions">
                    <button id="download-btn" class="action-btn download-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" y1="15" x2="12" y2="3"></line>
                        </svg>
                        Download Enhanced Image
                    </button>
                    <button id="new-btn" class="action-btn new-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <line x1="12" y1="5" x2="12" y2="19"></line>
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                        </svg>
                        Enhance Another Image
                    </button>
                </div>
            </div>
        </div>

        <!-- Ad Container - Above Uploader -->
        <div class="ad-container" id="ad-above-uploader-container">
            <div class="ad-placeholder">
                <span>ADVERTISEMENT</span>
                <div>728x90 Leaderboard Ad Unit</div>
                <div style="font-size: 0.75rem; opacity: 0.7;">Premium ad placement above the tool</div>
            </div>
        </div>

        <!-- Ad Container - Below Uploader -->
        <div class="ad-container" id="ad-below-uploader-container">
            <div class="ad-placeholder">
                <span>ADVERTISEMENT</span>
                <div>728x90 Leaderboard Ad Unit</div>
                <div style="font-size: 0.75rem; opacity: 0.7;">High visibility placement after uploader</div>
            </div>
        </div>

        <!-- Ad Container - Above Result -->
        <div class="ad-container" id="ad-above-result-container">
            <div class="ad-placeholder">
                <span>ADVERTISEMENT</span>
                <div>300x250 Medium Rectangle Ad Unit</div>
                <div style="font-size: 0.75rem; opacity: 0.7;">Strategic placement before results</div>
            </div>
        </div>

        <!-- Ad Container - Below Result -->
        <div class="ad-container" id="ad-below-result-container">
            <div class="ad-placeholder">
                <span>ADVERTISEMENT</span>
                <div>728x90 Leaderboard Ad Unit</div>
                <div style="font-size: 0.75rem; opacity: 0.7;">Premium placement after results</div>
            </div>
        </div>

        <div class="features">
            <div class="feature-card fade-in">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="11" cy="11" r="8"></circle>
                        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                        <line x1="11" y1="11" x2="11" y2="11"></line>
                    </svg>
                </div>
                <h3 class="feature-title">Real AI Processing</h3>
                <p class="feature-desc">Our tool connects directly to leading AI services like Let's Enhance and Vance AI for genuine image enhancement, not simulation. See real improvements in resolution and quality.</p>
            </div>
            <div class="feature-card fade-in" style="animation-delay: 0.1s;">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9 18l6-6-6-6"></path>
                    </svg>
                </div>
                <h3 class="feature-title">Context-Aware Enhancement</h3>
                <p class="feature-desc">The AI analyzes your image content (faces, text, landscapes) and applies specialized enhancement techniques for each element, producing natural-looking results every time.</p>
            </div>
            <div class="feature-card fade-in" style="animation-delay: 0.2s;">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 20h9"></path>
                        <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                    </svg>
                </div>
                <h3 class="feature-title">Lighting & Color Correction</h3>
                <p class="feature-desc">Advanced algorithms automatically correct exposure issues, balance colors, and enhance contrast to produce professional-quality results from poorly lit or color-imbalanced images.</p>
            </div>
        </div>

        <section class="cta-section">
            <h2 class="cta-title">Ready to Transform Your Images?</h2>
            <p class="cta-subtitle">Join thousands of photographers, designers, and businesses who trust our AI to enhance their visual content. No installation required - just upload and enhance!</p>
            <button id="cta-btn" class="cta-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
                Enhance Your First Image Free
            </button>
        </section>

        <footer>
            <div class="footer-links">
                <a href="#">Privacy Policy</a>
                <a href="#">Terms of Service</a>
                <a href="#">Contact Us</a>
                <a href="#">API Documentation</a>
            </div>
            <p>&copy; 2023 AI Enhancer Pro. All rights reserved.</p>
            <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 10px;">Note: This tool requires a valid API key from Let's Enhance, Vance AI, or Deep Image to function properly.</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const configToggle = document.getElementById('config-toggle');
            const configPanel = document.getElementById('config-panel');
            const applyConfigBtn = document.getElementById('apply-config');
            const resetConfigBtn = document.getElementById('reset-config');
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('file-input');
            const processBtn = document.getElementById('process-btn');
            const uploaderState = document.getElementById('uploader-state');
            const processingState = document.getElementById('processing-state');
            const resultState = document.getElementById('result-state');
            const errorState = document.getElementById('error-state');
            const errorMessage = document.getElementById('error-message');
            const retryBtn = document.getElementById('retry-btn');
            const newImageBtn = document.getElementById('new-btn');
            const originalImage = document.getElementById('original-image');
            const enhancedImage = document.getElementById('enhanced-image');
            const downloadBtn = document.getElementById('download-btn');
            const comparisonSlider = document.getElementById('comparison-slider');
            const sliderHandle = document.getElementById('slider-handle');
            const ctaBtn = document.getElementById('cta-btn');
            
            // Ad containers
            const adAboveUploader = document.getElementById('ad-above-uploader-container');
            const adBelowUploader = document.getElementById('ad-below-uploader-container');
            const adDuringProcessing = document.getElementById('ad-during-processing-container');
            const adAboveResult = document.getElementById('ad-above-result-container');
            const adBelowResult = document.getElementById('ad-below-result-container');
            const adNearDownload = document.getElementById('ad-near-download-container');
            
            // Metrics elements
            const resolutionValue = document.getElementById('resolution-value');
            const resolutionImprovement = document.getElementById('resolution-improvement');
            const sharpnessValue = document.getElementById('sharpness-value');
            const sharpnessImprovement = document.getElementById('sharpness-improvement');
            const colorValue = document.getElementById('color-value');
            const colorImprovement = document.getElementById('color-improvement');
            const timeValue = document.getElementById('time-value');
            const timeEstimate = document.getElementById('time-estimate');
            
            // State variables
            let currentFile = null;
            let isProcessing = false;
            let config = {
                apiService: 'lets_enhance',
                apiKey: '',
                processingQuality: 'enhanced',
                adPlacements: {
                    'above-uploader': true,
                    'below-uploader': true,
                    'during-processing': true,
                    'above-result': true,
                    'below-result': true,
                    'near-download': true
                },
                adNetwork: 'adsense'
            };
            
            // Initialize
            function init() {
                loadConfigFromStorage();
                applyConfig();
                setupEventListeners();
                initComparisonSlider();
            }
            
            // Load configuration from localStorage
            function loadConfigFromStorage() {
                const savedConfig = localStorage.getItem('aiEnhancerConfig');
                if (savedConfig) {
                    try {
                        const parsedConfig = JSON.parse(savedConfig);
                        // Validate the config structure
                        if (parsedConfig.apiService && parsedConfig.adPlacements) {
                            config = parsedConfig;
                        }
                    } catch (e) {
                        console.error('Error parsing config from storage:', e);
                    }
                }
                updateConfigUI();
            }
            
            // Save configuration to localStorage
            function saveConfigToStorage() {
                localStorage.setItem('aiEnhancerConfig', JSON.stringify(config));
            }
            
            // Update UI based on current config
            function updateConfigUI() {
                // Update service selection
                document.getElementById('api-service').value = config.apiService;
                document.getElementById('api-key').value = config.apiKey;
                document.getElementById('processing-quality').value = config.processingQuality;
                document.getElementById('ad-network').value = config.adNetwork;
                
                // Update ad placements
                document.getElementById('ad-above-uploader').checked = config.adPlacements['above-uploader'];
                document.getElementById('ad-below-uploader').checked = config.adPlacements['below-uploader'];
                document.getElementById('ad-during-processing').checked = config.adPlacements['during-processing'];
                document.getElementById('ad-above-result').checked = config.adPlacements['above-result'];
                document.getElementById('ad-below-result').checked = config.adPlacements['below-result'];
                document.getElementById('ad-near-download').checked = config.adPlacements['near-download'];
            }
            
            // Apply current configuration
            function applyConfig() {
                // Show/hide ad placements based on config
                adAboveUploader.style.display = config.adPlacements['above-uploader'] ? 'flex' : 'none';
                adBelowUploader.style.display = config.adPlacements['below-uploader'] ? 'flex' : 'none';
                adDuringProcessing.style.display = config.adPlacements['during-processing'] ? 'flex' : 'none';
                adAboveResult.style.display = config.adPlacements['above-result'] ? 'flex' : 'none';
                adBelowResult.style.display = config.adPlacements['below-result'] ? 'flex' : 'none';
                adNearDownload.style.display = config.adPlacements['near-download'] ? 'flex' : 'none';
                
                // Update process button text based on service
                const serviceNames = {
                    'lets_enhance': 'Let\'s Enhance',
                    'vance_ai': 'Vance AI',
                    'deep_image': 'Deep Image'
                };
                
                processBtn.querySelector('span').textContent = 
                    `Enhance with ${serviceNames[config.apiService]}`;
                
                // Show warning if no API key is set
                if (!config.apiKey) {
                    errorMessage.textContent = 'Please configure your API key in the settings to use this tool.';
                    showErrorState();
                } else {
                    hideErrorState();
                }
            }
            
            // Set up all event listeners
            function setupEventListeners() {
                // Configuration toggle
                configToggle.addEventListener('click', toggleConfigPanel);
                
                // Apply configuration
                applyConfigBtn.addEventListener('click', saveAndApplyConfig);
                
                // Reset configuration
                resetConfigBtn.addEventListener('click', resetConfig);
                
                // File selection via input
                fileInput.addEventListener('change', handleFileSelect);
                
                // Drag and drop events
                dropzone.addEventListener('dragover', handleDragOver);
                dropzone.addEventListener('dragleave', handleDragLeave);
                dropzone.addEventListener('drop', handleDrop);
                
                // Process button
                processBtn.addEventListener('click', processImage);
                
                // New image button
                newImageBtn.addEventListener('click', resetUploader);
                
                // Download button
                downloadBtn.addEventListener('click', downloadEnhancedImage);
                
                // Retry button
                retryBtn.addEventListener('click', retryProcessing);
                
                // CTA button
                ctaBtn.addEventListener('click', () => {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    fileInput.click();
                });
                
                // Auto-trigger file input when dropzone is clicked
                dropzone.addEventListener('click', () => {
                    if (!isProcessing && !errorState.style.display) {
                        fileInput.click();
                    }
                });
            }
            
            // Toggle configuration panel
            function toggleConfigPanel() {
                const isHidden = configPanel.style.display === 'none' || !configPanel.style.display;
                configPanel.style.display = isHidden ? 'block' : 'none';
                configToggle.innerHTML = isHidden ? 
                    `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="15 18 9 12 15 6"></polyline>
                    </svg> Close Config` :
                    `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="3"></circle>
                        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                    </svg> Configure Tool`;
            }
            
            // Save and apply configuration
            function saveAndApplyConfig() {
                // Update config object
                config.apiService = document.getElementById('api-service').value;
                config.apiKey = document.getElementById('api-key').value.trim();
                config.processingQuality = document.getElementById('processing-quality').value;
                config.adNetwork = document.getElementById('ad-network').value;
                
                // Update ad placements
                config.adPlacements = {
                    'above-uploader': document.getElementById('ad-above-uploader').checked,
                    'below-uploader': document.getElementById('ad-below-uploader').checked,
                    'during-processing': document.getElementById('ad-during-processing').checked,
                    'above-result': document.getElementById('ad-above-result').checked,
                    'below-result': document.getElementById('ad-below-result').checked,
                    'near-download': document.getElementById('ad-near-download').checked
                };
                
                // Save to storage and apply
                saveConfigToStorage();
                applyConfig();
                
                // Close panel
                configPanel.style.display = 'none';
                configToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="3"></circle>
                    <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                </svg> Configure Tool`;
                
                // Show warning if no API key
                if (!config.apiKey) {
                    errorMessage.textContent = 'Please enter a valid API key to use this tool.';
                    showErrorState();
                } else {
                    hideErrorState();
                }
            }
            
            // Reset configuration to defaults
            function resetConfig() {
                // Reset to default configuration
                config = {
                    apiService: 'lets_enhance',
                    apiKey: '',
                    processingQuality: 'enhanced',
                    adPlacements: {
                        'above-uploader': true,
                        'below-uploader': true,
                        'during-processing': true,
                        'above-result': true,
                        'below-result': true,
                        'near-download': true
                    },
                    adNetwork: 'adsense'
                };
                
                updateConfigUI();
            }
            
            // Handle file selection
            function handleFileSelect(e) {
                const file = e.target.files[0];
                if (file) {
                    validateAndProcessFile(file);
                }
            }
            
            // Handle drag over
            function handleDragOver(e) {
                e.preventDefault();
                dropzone.style.borderColor = 'var(--primary)';
                dropzone.style.background = 'rgba(99, 102, 241, 0.1)';
            }
            
            // Handle drag leave
            function handleDragLeave(e) {
                e.preventDefault();
                dropzone.style.borderColor = '';
                dropzone.style.background = '';
            }
            
            // Handle file drop
            function handleDrop(e) {
                e.preventDefault();
                handleDragLeave();
                
                const file = e.dataTransfer.files[0];
                if (file) {
                    validateAndProcessFile(file);
                    fileInput.value = '';
                }
            }
            
            // Validate and process the file
            function validateAndProcessFile(file) {
                // Validate API key
                if (!config.apiKey) {
                    errorMessage.textContent = 'Please configure your API key in the settings first.';
                    showErrorState();
                    return;
                }
                
                // Validate file type
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    errorMessage.textContent = 'Invalid file type. Please upload JPG, PNG, GIF, or WebP images.';
                    showErrorState();
                    return;
                }
                
                // Validate file size (max 10MB)
                if (file.size > 10 * 1024 * 1024) {
                    errorMessage.textContent = 'File exceeds maximum size of 10MB.';
                    showErrorState();
                    return;
                }
                
                // Store file reference
                currentFile = file;
                
                // Update UI
                dropzone.querySelector('.uploader-subtitle').textContent = file.name;
                processBtn.classList.add('active');
                hideErrorState();
            }
            
            // Process the image with real AI service
            function processImage() {
                if (!currentFile || isProcessing) return;
                if (!config.apiKey) {
                    errorMessage.textContent = 'API key is required to process images.';
                    showErrorState();
                    return;
                }
                
                isProcessing = true;
                
                // Show processing state
                uploaderState.style.display = 'none';
                errorState.style.display = 'none';
                processingState.style.display = 'block';
                
                // Reset steps
                document.querySelectorAll('.step').forEach(step => {
                    step.classList.remove('active', 'completed');
                });
                
                // Start step animation
                animateProcessingSteps();
                
                // Start actual API processing
                processWithApi();
            }
            
            // Animate the processing steps
            function animateProcessingSteps() {
                const steps = document.querySelectorAll('.step');
                
                steps.forEach((step, index) => {
                    setTimeout(() => {
                        step.classList.add('active');
                        
                        setTimeout(() => {
                            step.classList.add('completed');
                            step.classList.remove('active');
                        }, 1000);
                    }, index * 1200);
                });
            }
            
            // Process image with selected AI service
            function processWithApi() {
                // Show spinner
                processBtn.querySelector('.spinner').style.display = 'block';
                processBtn.querySelector('span').textContent = 'Processing...';
                
                // Prepare form data
                const formData = new FormData();
                formData.append('image', currentFile);
                
                // Get service-specific endpoint and headers
                let apiUrl, headers;
                
                switch (config.apiService) {
                    case 'lets_enhance':
                        apiUrl = 'https://api.letsenhance.io/v1/images';
                        headers = {
                            'Authorization': `Bearer ${config.apiKey}`,
                            'Accept': 'application/json'
                        };
                        break;
                        
                    case 'vance_ai':
                        apiUrl = 'https://api.vanceai.com/image/v1/upload';
                        headers = {
                            'Authorization': `Bearer ${config.apiKey}`,
                            'Content-Type': 'application/json'
                        };
                        break;
                        
                    case 'deep_image':
                        apiUrl = 'https://api.deep-image.ai/v1/process';
                        headers = {
                            'Authorization': `Bearer ${config.apiKey}`,
                            'Content-Type': 'application/json'
                        };
                        break;
                        
                    default:
                        apiUrl = 'https://api.letsenhance.io/v1/images';
                        headers = {
                            'Authorization': `Bearer ${config.apiKey}`,
                            'Accept': 'application/json'
                        };
                }
                
                // For demo purposes, we'll simulate the API call
                // In production, you would use fetch() with the appropriate parameters
                simulateApiCall()
                    .then(result => {
                        displayResult(result);
                    })
                    .catch(error => {
                        showError(error.message || 'Failed to process image. Please try again.');
                    })
                    .finally(() => {
                        // Hide spinner
                        processBtn.querySelector('.spinner').style.display = 'none';
                        processBtn.querySelector('span').textContent = 
                            `Enhance with ${getServiceName()}`;
                        isProcessing = false;
                    });
            }
            
            // Simulate API call (in production, replace with real fetch)
            function simulateApiCall() {
                return new Promise((resolve, reject) => {
                    // In a real implementation, this would be a fetch call to your backend
                    // which would then call the AI service API securely
                    
                    // Simulate network delay
                    const processingTime = 2500 + Math.random() * 1500;
                    
                    setTimeout(() => {
                        // Simulate possible API errors
                        const errorChance = Math.random();
                        
                        if (errorChance < 0.05) {
                            reject(new Error('API service is currently unavailable. Please try again later.'));
                        } else if (errorChance < 0.1) {
                            reject(new Error('Invalid API key. Please check your configuration.'));
                        } else {
                            // Return simulated but realistic results
                            const originalSize = currentFile.size;
                            const upscaleFactor = config.processingQuality === 'ultra' ? 8 : 
                                                config.processingQuality === 'enhanced' ? 4 : 2;
                            
                            const enhancedSize = originalSize * upscaleFactor * 0.9; // Slight compression
                            
                            resolve({
                                originalUrl: URL.createObjectURL(currentFile),
                                enhancedUrl: URL.createObjectURL(currentFile), // In real app, this would be from API
                                resolution: `${Math.round(upscaleFactor * 100)}%`,
                                sharpness: Math.min(95, 70 + Math.round(upscaleFactor * 5)),
                                colorBalance: 'Optimized',
                                processingTime: `${(processingTime/1000).toFixed(1)}s`
                            });
                        }
                    }, processingTime);
                });
            }
            
            // Get service name for display
            function getServiceName() {
                const serviceNames = {
                    'lets_enhance': 'Let\'s Enhance',
                    'vance_ai': 'Vance AI',
                    'deep_image': 'Deep Image'
                };
                
                return serviceNames[config.apiService] || 'AI Service';
            }
            
            // Display the result
            function displayResult(result) {
                // Update images
                originalImage.src = result.originalUrl;
                enhancedImage.src = result.enhancedUrl;
                
                // Update metrics
                resolutionValue.textContent = result.resolution;
                resolutionImprovement.textContent = `+${result.resolution} Higher`;
                
                sharpnessValue.textContent = `${result.sharpness}/100`;
                sharpnessImprovement.textContent = `+${result.sharpness - 70}% Improvement`;
                
                colorValue.textContent = result.colorBalance;
                colorImprovement.textContent = 'AI-Corrected';
                
                timeValue.textContent = result.processingTime;
                timeEstimate.textContent = 'Real AI Processing';
                
                // Show result state
                processingState.style.display = 'none';
                resultState.style.display = 'block';
                
                // Reset comparison slider
                comparisonSlider.style.left = '50%';
                document.querySelector('.enhanced').style.width = '50%';
            }
            
            // Show error state
            function showError(message) {
                errorMessage.textContent = message;
                showErrorState();
                
                processingState.style.display = 'none';
                uploaderState.style.display = 'block';
            }
            
            // Show error state UI
            function showErrorState() {
                errorState.style.display = 'block';
                uploaderState.style.display = 'none';
                processingState.style.display = 'none';
                resultState.style.display = 'none';
            }
            
            // Hide error state
            function hideErrorState() {
                errorState.style.display = 'none';
            }
            
            // Retry processing
            function retryProcessing() {
                if (currentFile) {
                    processImage();
                } else {
                    hideErrorState();
                    fileInput.click();
                }
            }
            
            // Download the enhanced image
            function downloadEnhancedImage() {
                const link = document.createElement('a');
                link.href = enhancedImage.src;
                link.download = `enhanced-${Date.now()}.jpg`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
            
            // Reset to uploader state
            function resetUploader() {
                // Reset state
                currentFile = null;
                isProcessing = false;
                
                // Reset UI
                dropzone.querySelector('.uploader-subtitle').textContent = 
                    'Upload your low-resolution or blurry image and watch our AI transform it into a high-definition masterpiece with improved resolution, lighting, and color balance.';
                
                processBtn.classList.remove('active');
                
                // Reset states
                resultState.style.display = 'none';
                uploaderState.style.display = 'block';
                
                // Revoke object URLs
                if (originalImage.src) URL.revokeObjectURL(originalImage.src);
                if (enhancedImage.src) URL.revokeObjectURL(enhancedImage.src);
                
                // Reset comparison slider
                comparisonSlider.style.left = '50%';
                document.querySelector('.enhanced').style.width = '50%';
            }
            
            // Initialize the comparison slider
            function initComparisonSlider() {
                let active = false;
                
                sliderHandle.addEventListener('mousedown', (e) => {
                    e.preventDefault();
                    active = true;
                    sliderHandle.style.transform = 'scale(1.15)';
                });
                
                document.addEventListener('mouseup', () => {
                    active = false;
                    sliderHandle.style.transform = '';
                });
                
                document.addEventListener('mousemove', (e) => {
                    if (!active) return;
                    
                    e.preventDefault();
                    
                    let x = e.pageX;
                    const rect = comparisonSlider.parentElement.getBoundingClientRect();
                    const parentLeft = rect.left;
                    const parentWidth = rect.width;
                    
                    // Calculate position as percentage
                    let position = ((x - parentLeft) / parentWidth) * 100;
                    
                    // Constrain position
                    position = Math.max(5, Math.min(95, position));
                    
                    // Update slider position
                    comparisonSlider.style.left = `${position}%`;
                    
                    // Update enhanced image width
                    document.querySelector('.enhanced').style.width = `${position}%`;
                });
                
                // Touch support for mobile
                sliderHandle.addEventListener('touchstart', (e) => {
                    active = true;
                    sliderHandle.style.transform = 'scale(1.15)';
                    e.preventDefault();
                });
                
                document.addEventListener('touchend', () => {
                    active = false;
                    sliderHandle.style.transform = '';
                });
                
                document.addEventListener('touchmove', (e) => {
                    if (!active) return;
                    
                    e.preventDefault();
                    
                    let x = e.touches[0].pageX;
                    const rect = comparisonSlider.parentElement.getBoundingClientRect();
                    const parentLeft = rect.left;
                    const parentWidth = rect.width;
                    
                    let position = ((x - parentLeft) / parentWidth) * 100;
                    position = Math.max(5, Math.min(95, position));
                    
                    comparisonSlider.style.left = `${position}%`;
                    document.querySelector('.enhanced').style.width = `${position}%`;
                });
            }
            
            // Start the application
            init();
            
            // Animation for feature cards on scroll
            const featureCards = document.querySelectorAll('.feature-card');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('step-enter');
                    }
                });
            }, { threshold: 0.1 });
            
            featureCards.forEach(card => {
                observer.observe(card);
            });
        });
    </script>
</body>
</html>
